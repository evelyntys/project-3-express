{{#extends 'base'}}
{{#block 'content'}}
<div class="container mt-2">
    <h4>Updating {{this.figure.name}}</h4>
<form method="POST">
    <input type="hidden" name="_csrf" value="{{csrfToken}}"/>
    <div class="row">
    {{{form}}}
    <div class="image-div">
        <div class="d-flex justify-content-center">
        {{#if figure.image_url}}
        <img src="{{figure.image_url}}" id="uploaded_image"/>
        {{else}}
        <img src="/placeholder.png" id="uploaded_image"/>
        {{/if}}
        </div>
        <div class="d-flex justify-content-end">
        <a href="#" class="btn btn-primary text-end" id="upload_widget">upload</a>
        </div>
        </div>
    </div>
    <input type="submit" value="Update product" class="btn btn-primary my-1"/>
</form>
</div>
</div>
{{/block}}

{{#block 'js'}}
<script>
    let allFields = document.querySelectorAll('.form-group');
    let parentForm = document.querySelector('.row');
    let imageDiv = document.querySelector('.image-div');
    parentForm.insertBefore(imageDiv, allFields[1]);
    let series_mediums = {{{ series_mediums }}}
    let selectedSeries = document.querySelector('#id_series_id');
    let allMediumCheckboxes = document.getElementsByName('medium_id');
    let newSeries = document.createElement('div');
    let selectedCollection = document.querySelector('#id_collection_id');
    let newCollection = document.createElement('div');
    newSeries.innerHTML = `
        <label class="form-label">Series name: <label>
        <input type="text" name="new-series" class="form-control"/>
        `
    newCollection.innerHTML =
        `<div> 
    <label class="form-label">Collection name: <label>
        <input type="text" name="new-collection" class="form-control"/>
        </div>
        <div> 
    <label class="form-label">Manufacturer name: <label>
        <input type="text" name="new-manufacturer" class="form-control"/>
        </div>
        `
    for (let each of allFields) {
        each.classList.add('my-1');
        if (each.innerHTML.includes('id_series_id')) {
            each.appendChild(newSeries)
        }
        if (each.innerHTML.includes('id_collection_id')) {
            each.appendChild(newCollection)
        }
        if (each.innerHTML.includes('id_medium_id')) {
            let allCheckboxes = document.querySelectorAll('.format-checkbox');
            for (let i = 0; i < allCheckboxes.length - 1; i = i + 2) {
                let parentWrap = document.createElement('div');
                parentWrap.classList.add('form-check');
                parentWrap.classList.add('form-check-inline');
                parentWrap.appendChild(allCheckboxes[i]);
                parentWrap.appendChild(allCheckboxes[i + 1]);
                each.appendChild(parentWrap);
            };
        }
    };

    newSeries.style.display = 'none';
    newCollection.style.display = 'none';

    window.addEventListener('DOMContentLoaded', function () {
        if (selectedSeries.value == 0) {
            newSeries.style.display = 'block';
        }
        if (selectedCollection.value == 0) {
            newCollection.style.display = 'block';
        }
    })
    selectedSeries.addEventListener('change', function () {
        for (let each of allMediumCheckboxes) {
            each.checked = false
        }
        if (selectedSeries.value == 0) {
            newSeries.style.display = 'block';
        }
        else {
            for (let each of series_mediums) {
                let mediums = each[parseInt(selectedSeries.value)];
                if (mediums && mediums.length > 0) {
                    console.log(mediums)
                    for (let each of allMediumCheckboxes) {
                        for (let i = 0; i < mediums.length; i++) {
                            if (mediums[i] == parseInt(each.value)) {
                                each.checked = true;
                            }
                        }
                    }
                }
            }
        }
    })
    selectedCollection.addEventListener('change', function () {
        if (selectedCollection.value == 0) {
            newCollection.style.display = 'block';
        }
    })
</script>

<script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.21.1/axios.min.js"
    integrity="sha512-bZS47S7sPOxkjU/4Bt0zrhEtWx0y0CRkhEp8IckzK+ltifIIE9EMIMTuT/mEzoIMewUINruDBIR/jJnbguonqQ=="
    crossorigin="anonymous"></script>
<script src="https://widget.cloudinary.com/v2.0/global/all.js" type="text/javascript"></script>

<script>
    function generateSignature(callback, params_to_sign) {
        axios.get('/cloudinary/sign', {
            params: {
                params_to_sign
            }
        }).then(function (response) {
            callback(response.data);
        })
    }
    var myWidget = cloudinary.createUploadWidget({
        cloudName: "{{cloudinaryName}}",
        apiKey: "{{cloudinaryApiKey}}",
        uploadPreset: "{{cloudinaryPreset}}",
        uploadSignature: generateSignature,
        cropping: true,
        showUploadMoreButton: true,
        thumbnailTransformation: [{ width: 100, height: 100, crop: 'fill' }]
    }, (error, result) => {
        if (!error && result && result.event === 'success') {
            console.log('completed, image info => ', result.info);
            document.querySelector('#upload_widget').style.display = 'none';
            document.querySelector('#id_image_url').value = result.info.url;
            document.querySelector('#uploaded_image').src = result.info.url;
            document.querySelector('#uploaded_image').style.display = 'inline';
            document.querySelector('#id_thumbnail_url').value = result.info.thumbnail_url;
        }
    })
    document.getElementById('upload_widget').addEventListener('click', function () {
        myWidget.open();
    }, false)
</script>
{{/block}}
{{/extends}}